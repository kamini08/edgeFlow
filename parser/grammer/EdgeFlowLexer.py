# Generated from grammer/EdgeFlow.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,175,8,13,1,
        14,1,14,5,14,179,8,14,10,14,12,14,182,9,14,1,15,1,15,5,15,186,8,
        15,10,15,12,15,189,9,15,1,15,1,15,1,16,4,16,194,8,16,11,16,12,16,
        195,1,17,1,17,5,17,200,8,17,10,17,12,17,203,9,17,1,17,1,17,1,17,
        1,17,1,18,4,18,210,8,18,11,18,12,18,211,1,18,1,18,1,201,0,19,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,1,0,5,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,3,0,10,10,13,13,34,34,1,0,48,57,3,0,9,10,13,
        13,32,32,220,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,
        1,0,0,0,3,41,1,0,0,0,5,47,1,0,0,0,7,56,1,0,0,0,9,70,1,0,0,0,11,82,
        1,0,0,0,13,95,1,0,0,0,15,107,1,0,0,0,17,120,1,0,0,0,19,133,1,0,0,
        0,21,147,1,0,0,0,23,152,1,0,0,0,25,160,1,0,0,0,27,174,1,0,0,0,29,
        176,1,0,0,0,31,183,1,0,0,0,33,193,1,0,0,0,35,197,1,0,0,0,37,209,
        1,0,0,0,39,40,5,61,0,0,40,2,1,0,0,0,41,42,5,109,0,0,42,43,5,111,
        0,0,43,44,5,100,0,0,44,45,5,101,0,0,45,46,5,108,0,0,46,4,1,0,0,0,
        47,48,5,113,0,0,48,49,5,117,0,0,49,50,5,97,0,0,50,51,5,110,0,0,51,
        52,5,116,0,0,52,53,5,105,0,0,53,54,5,122,0,0,54,55,5,101,0,0,55,
        6,1,0,0,0,56,57,5,116,0,0,57,58,5,97,0,0,58,59,5,114,0,0,59,60,5,
        103,0,0,60,61,5,101,0,0,61,62,5,116,0,0,62,63,5,95,0,0,63,64,5,100,
        0,0,64,65,5,101,0,0,65,66,5,118,0,0,66,67,5,105,0,0,67,68,5,99,0,
        0,68,69,5,101,0,0,69,8,1,0,0,0,70,71,5,100,0,0,71,72,5,101,0,0,72,
        73,5,112,0,0,73,74,5,108,0,0,74,75,5,111,0,0,75,76,5,121,0,0,76,
        77,5,95,0,0,77,78,5,112,0,0,78,79,5,97,0,0,79,80,5,116,0,0,80,81,
        5,104,0,0,81,10,1,0,0,0,82,83,5,105,0,0,83,84,5,110,0,0,84,85,5,
        112,0,0,85,86,5,117,0,0,86,87,5,116,0,0,87,88,5,95,0,0,88,89,5,115,
        0,0,89,90,5,116,0,0,90,91,5,114,0,0,91,92,5,101,0,0,92,93,5,97,0,
        0,93,94,5,109,0,0,94,12,1,0,0,0,95,96,5,98,0,0,96,97,5,117,0,0,97,
        98,5,102,0,0,98,99,5,102,0,0,99,100,5,101,0,0,100,101,5,114,0,0,
        101,102,5,95,0,0,102,103,5,115,0,0,103,104,5,105,0,0,104,105,5,122,
        0,0,105,106,5,101,0,0,106,14,1,0,0,0,107,108,5,111,0,0,108,109,5,
        112,0,0,109,110,5,116,0,0,110,111,5,105,0,0,111,112,5,109,0,0,112,
        113,5,105,0,0,113,114,5,122,0,0,114,115,5,101,0,0,115,116,5,95,0,
        0,116,117,5,102,0,0,117,118,5,111,0,0,118,119,5,114,0,0,119,16,1,
        0,0,0,120,121,5,109,0,0,121,122,5,101,0,0,122,123,5,109,0,0,123,
        124,5,111,0,0,124,125,5,114,0,0,125,126,5,121,0,0,126,127,5,95,0,
        0,127,128,5,108,0,0,128,129,5,105,0,0,129,130,5,109,0,0,130,131,
        5,105,0,0,131,132,5,116,0,0,132,18,1,0,0,0,133,134,5,101,0,0,134,
        135,5,110,0,0,135,136,5,97,0,0,136,137,5,98,0,0,137,138,5,108,0,
        0,138,139,5,101,0,0,139,140,5,95,0,0,140,141,5,102,0,0,141,142,5,
        117,0,0,142,143,5,115,0,0,143,144,5,105,0,0,144,145,5,111,0,0,145,
        146,5,110,0,0,146,20,1,0,0,0,147,148,5,105,0,0,148,149,5,110,0,0,
        149,150,5,116,0,0,150,151,5,56,0,0,151,22,1,0,0,0,152,153,5,102,
        0,0,153,154,5,108,0,0,154,155,5,111,0,0,155,156,5,97,0,0,156,157,
        5,116,0,0,157,158,5,49,0,0,158,159,5,54,0,0,159,24,1,0,0,0,160,161,
        5,110,0,0,161,162,5,111,0,0,162,163,5,110,0,0,163,164,5,101,0,0,
        164,26,1,0,0,0,165,166,5,116,0,0,166,167,5,114,0,0,167,168,5,117,
        0,0,168,175,5,101,0,0,169,170,5,102,0,0,170,171,5,97,0,0,171,172,
        5,108,0,0,172,173,5,115,0,0,173,175,5,101,0,0,174,165,1,0,0,0,174,
        169,1,0,0,0,175,28,1,0,0,0,176,180,7,0,0,0,177,179,7,1,0,0,178,177,
        1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,30,1,
        0,0,0,182,180,1,0,0,0,183,187,5,34,0,0,184,186,8,2,0,0,185,184,1,
        0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,
        0,0,0,189,187,1,0,0,0,190,191,5,34,0,0,191,32,1,0,0,0,192,194,7,
        3,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,
        0,0,0,196,34,1,0,0,0,197,201,5,35,0,0,198,200,9,0,0,0,199,198,1,
        0,0,0,200,203,1,0,0,0,201,202,1,0,0,0,201,199,1,0,0,0,202,204,1,
        0,0,0,203,201,1,0,0,0,204,205,5,10,0,0,205,206,1,0,0,0,206,207,6,
        17,0,0,207,36,1,0,0,0,208,210,7,4,0,0,209,208,1,0,0,0,210,211,1,
        0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,6,
        18,0,0,214,38,1,0,0,0,7,0,174,180,187,195,201,211,1,6,0,0
    ]

class EdgeFlowLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    MODEL = 2
    QUANTIZE = 3
    TARGET_DEVICE = 4
    DEPLOY_PATH = 5
    INPUT_STREAM = 6
    BUFFER_SIZE = 7
    OPTIMIZE_FOR = 8
    MEMORY_LIMIT = 9
    FUSION = 10
    INT8 = 11
    FLOAT16 = 12
    NONE = 13
    BOOL = 14
    IDENTIFIER = 15
    STRING = 16
    INTEGER = 17
    COMMENT = 18
    WS = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'model'", "'quantize'", "'target_device'", "'deploy_path'", 
            "'input_stream'", "'buffer_size'", "'optimize_for'", "'memory_limit'", 
            "'enable_fusion'", "'int8'", "'float16'", "'none'" ]

    symbolicNames = [ "<INVALID>",
            "MODEL", "QUANTIZE", "TARGET_DEVICE", "DEPLOY_PATH", "INPUT_STREAM", 
            "BUFFER_SIZE", "OPTIMIZE_FOR", "MEMORY_LIMIT", "FUSION", "INT8", 
            "FLOAT16", "NONE", "BOOL", "IDENTIFIER", "STRING", "INTEGER", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "MODEL", "QUANTIZE", "TARGET_DEVICE", "DEPLOY_PATH", 
                  "INPUT_STREAM", "BUFFER_SIZE", "OPTIMIZE_FOR", "MEMORY_LIMIT", 
                  "FUSION", "INT8", "FLOAT16", "NONE", "BOOL", "IDENTIFIER", 
                  "STRING", "INTEGER", "COMMENT", "WS" ]

    grammarFileName = "EdgeFlow.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


