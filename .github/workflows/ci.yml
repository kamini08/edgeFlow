name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enforce linear history (no merge commits)
        run: |
          # Fail if the PR branch introduces merge commits not in the base branch.
          # Check only commits reachable from HEAD but not from origin/main.
          git fetch origin main --quiet || true
          MERGES=$(git rev-list --merges origin/main..HEAD)
          if [ -n "$MERGES" ]; then
            echo "Merge commits detected in branch (not in origin/main):" >&2
            echo "$MERGES" >&2
            exit 1
          fi

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Lint - black
        run: black --check .

      - name: Lint - isort
        run: isort --profile black --check-only .

      - name: Lint - flake8
        run: flake8 .

      - name: Type check - mypy
        run: mypy --ignore-missing-imports .

      - name: Run tests
        env:
          PYTHONPATH: .
        run: python -m pytest -q --cov=edgeflowc --cov-report=xml --cov-fail-under=90

      - name: Generate coverage badge
        run: genbadge coverage -i coverage.xml -o coverage.svg

      - name: Upload coverage badge artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: coverage.svg
