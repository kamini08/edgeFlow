name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.tags.outputs.backend }}
      frontend_image: ${{ steps.tags.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - name: Derive lowercase image repo
        run: |
          echo "IMAGE_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: tags
        run: |
          SHA_TAG=sha-${GITHUB_SHA::7}
          echo "backend=${{ env.REGISTRY }}/${IMAGE_REPO}-backend:${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "backend_latest=${{ env.REGISTRY }}/${IMAGE_REPO}-backend:latest" >> $GITHUB_OUTPUT
          echo "frontend=${{ env.REGISTRY }}/${IMAGE_REPO}-frontend:${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "frontend_latest=${{ env.REGISTRY }}/${IMAGE_REPO}-frontend:latest" >> $GITHUB_OUTPUT

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
            ${{ steps.tags.outputs.backend }}
            ${{ steps.tags.outputs.backend_latest }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.tags.outputs.frontend }}
            ${{ steps.tags.outputs.frontend_latest }}

      - name: Show image tags
        run: |
          echo "Backend: ${{ steps.tags.outputs.backend }}"
          echo "Frontend: ${{ steps.tags.outputs.frontend }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Write kubeconfig from secret
        shell: bash
        run: |
          echo "${KUBECONFIG_B64}" | base64 -d > kubeconfig
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}

      - name: Set kubectl context
        run: echo "KUBECONFIG=${GITHUB_WORKSPACE}/kubeconfig" >> $GITHUB_ENV

      - name: Create namespace if missing
        run: |
          NS=${NAMESPACE:-edgeflow}
          kubectl create namespace ${NS} --dry-run=client -o yaml | kubectl apply -f -
        env:
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}

      - name: Ensure GHCR imagePullSecret (optional)
        if: ${{ secrets.GHCR_USERNAME && secrets.GHCR_TOKEN }}
        run: |
          NS=${NAMESPACE:-edgeflow}
          kubectl -n ${NS} create secret docker-registry ghcr-pull-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=ci@example.com \
            --dry-run=client -o yaml | kubectl apply -f -
        env:
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}

      - name: Apply manifests
        run: |
          NS=${NAMESPACE:-edgeflow}
          kubectl -n ${NS} apply -k k8s/
        env:
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}

      - name: Update images
        run: |
          NS=${NAMESPACE:-edgeflow}
          kubectl -n ${NS} set image deployment/edgeflow-backend backend=${BACKEND_IMAGE}
          kubectl -n ${NS} set image deployment/edgeflow-frontend frontend=${FRONTEND_IMAGE}
        env:
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}
          BACKEND_IMAGE: ${{ needs.build-and-push.outputs.backend_image }}
          FRONTEND_IMAGE: ${{ needs.build-and-push.outputs.frontend_image }}

      - name: Rollout status
        run: |
          NS=${NAMESPACE:-edgeflow}
          kubectl -n ${NS} rollout status deployment/edgeflow-backend --timeout=180s
          kubectl -n ${NS} rollout status deployment/edgeflow-frontend --timeout=180s
        env:
          NAMESPACE: ${{ vars.K8S_NAMESPACE }}
